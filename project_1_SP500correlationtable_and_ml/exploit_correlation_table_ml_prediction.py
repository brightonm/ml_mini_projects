#!/usr/bin/env python3

"""
Using machine learning to exploit the correlation table
and build a machine that recognize those relationships
in order to invest.
Labels: Buy, Sell, Hold
Features: Price data converted in pourcentage change of the company
and also other companies
Buy : if in the next 7 days price will go up of more than 2%
Sell : if in the next 7 days the price will go down of more than 2%
Hold : else condition
"""

from collections import Counter
import numpy as np
import pandas as pd
import pickle
from sklearn import svm, cross_validation, neighbors
from sklearn.ensemble import VotingClassifier, RandomForestClassifier


def process_data_for_labels(ticker):
    """
    Processing data for one company
    """
    hm_days = 7 #how many days
    df = pd.read_csv('sp500_joined_closes.csv', index_col=0)
    tickers = df.columns.values.tolist()
    df.fillna(0, inplace=True)

    for i in range(1, hm_days+1):
        df['{}_{}d'.format(ticker, i)] = (df[ticker].shift(-i) - df[ticker])/df[ticker]

    df.fillna(0, inplace=True)
    return tickers, df


def buy_sell_hold(*args): # Permit us to pass any number of parameter
    """
    args : seven days future days we have predicted
    """
    cols = [c for c in args]
    requirement = 0.02
    for col in cols:
        if col > requirement:
            return 1
        elif col < -requirement:
            return -1
    return 0


def extract_featuresets(ticker):
    """
    Extract features, labels from the dataframe in order to
    get ready for machine learning
    """
    tickers, df = process_data_for_labels(ticker)
    df['{}_target'.format(ticker)] = list(map(buy_sell_hold,
                                              df['{}_1d'.format(ticker)],
                                              df['{}_2d'.format(ticker)],
                                              df['{}_3d'.format(ticker)],
                                              df['{}_4d'.format(ticker)],
                                              df['{}_5d'.format(ticker)],
                                              df['{}_6d'.format(ticker)],
                                              df['{}_7d'.format(ticker)]))

    vals = df['{}_target'.format(ticker)].values.tolist()
    str_vals = [str(i) for i in vals]
    print('Data spread:', Counter(str_vals)) # Count the numbers of the different the caracters in str_vals
    df.fillna(0, inplace=True)

    df = df.replace([np.inf, -np.inf], np.nan)
    df.dropna(inplace=True)

    df_vals = df[[ticker for ticker in tickers]].pct_change() # normalized values (pourcent change)
    df_vals = df_vals.replace([np.inf, -np.inf], 0)
    df_vals.fillna(0, inplace=True)

    X = df_vals.values # Features
    y = df['{}_target'.format(ticker)].values # Labels

    return X, y, df

def do_ml(ticker):
    '''
    Apply machine learning to our data
    '''
    X, y, df = extract_featuresets(ticker)

    X_train, X_test, y_train, y_test = cross_validation.train_test_split(X, y, test_size=0.25)

    #Â clf = neighbors.KNeighborsClassifier()

    clf = VotingClassifier([('lsvc', svm.LinearSVC()),
                            ('knn', neighbors.KNeighborsClassifier()),
                            ('rfor', RandomForestClassifier())],)

    clf.fit(X_train, y_train) # training our model
    confidence = clf.score(X_test, y_test) # Accuracy
    print('Accuracy:', confidence)
    predictions = clf.predict(X_test) # Prediction
    print('Predicted spread:', Counter(predictions))

    return confidence

do_ml('BAC')
